// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16 ( a = instruction, b = ALUout, sel = instruction[15], out = Areg );
    ARegister( in = Areg, load = Aloadflag , out = Aregout );

    DRegister( in = ALUout, load = Dloadflag, out = xALUin );
    Mux16 ( a = Aregout , b = inM , sel = instruction[12], out = yALUin );

    ALU ( x = xALUin, y = yALUin, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, zr = zrflag, ng = ngflag );

    // A register load flag equals to 1 when :
    // case 1. instruction[15] = 1 and Dest[2] = 1
    // case 2. instruction[15] = 0 
    And ( a = instruction[15], b = instruction[5], out = andout0 );
    Not ( in = instruction[15], out = notout0 );
    Or ( a = andout0, b = notout0, out = Aloadflag );

    // D register load flag equals to 1 when:
    And ( a = instruction[4], b = instruction[15], out = Dloadflag );


    // outM 
    And16 ( a = ALUout, b = true, out = outM );

    // writeM 
    And ( a = instruction[3], b = instruction[15], out = writeM );

    // addressM 
    And16 ( a = Aregout, b = true, out[0..14] = addressM );

    // PC part
    Not ( in = zrflag, out = Not0 );
    Not ( in = ngflag, out = Not1 );
    And ( a = Not0, b = Not1, out = btflag0 );
    // case: bigger than 0 
    And ( a = instruction[15], b = instruction[0], out = btflag1 );
    And ( a = btflag0, b = btflag1, out = btloadflag );
    // case: smaller than 0 
    And ( a = instruction[15], b = instruction[2], out = stflag0 );
    And ( a = stflag0, b = ngflag, out = smloadflag );
    // case: equals to zero
    And ( a = instruction[15], b = instruction[1], out = eqflag0 );
    And ( a = eqflag0, b = zrflag, out = eqloadflag );

    // summarize three cases
    Or ( a = btloadflag, b = smloadflag, out = Orout0 );
    Or ( a = Orout0, b = eqloadflag, out = pcloadflag );

    Or ( a = pcloadflag, b = reset, out = Orout1 );
    Not ( in = Orout1, out = incflag );
    PC ( in = Aregout, load = pcloadflag, inc = incflag, reset = reset, out[0..14] = pc );

}