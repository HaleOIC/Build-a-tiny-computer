// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not ( in = address[14], out = RAM16Kload );
    And ( a = RAM16Kload, b = load, out = RAM16Kloadflag );

    Not ( in = address[13], out = screenload );
    And ( a = screenload, b = address[14], out = outscreen0 );
    And ( a = outscreen0, b = load, out = screenloadflag );

    And ( a = address[14], b = address[13], out = keyboard0 );
    And ( a = keyboard0, b = load, out = keyboardloadflag );

    RAM16K ( address = address[0..13], in = in, load = RAM16Kloadflag, out = out0 );
    Screen ( address = address[0..12], in = in, load = screenloadflag, out = out1 );
    Keyboard ( out = out2 );

    Mux16 ( a = false, b = out0, sel = RAM16Kload, out = output0 );
    Mux16 ( a = false, b = out1, sel = outscreen0, out = output1 );
    Mux16 ( a = false, b = out2, sel = keyboard0, out = output2 );

    Or16 ( a = output0, b = output1, out = orout0 );
    Or16 ( a = orout0, b = output2, out = out );
}